from aiogram import Bot, Dispatcher, executor, types
from config import *
from payments import qiwi_handler
from threading import Thread
import sqlite3
import logging
import re


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

con = sqlite3.connect('db.sqlite', check_same_thread=False)
cur = con.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS Users (
    id INTEGER PRIMARY KEY,
    balance INTEGER
)''')
cur.execute('''CREATE TABLE IF NOT EXISTS Qiwi (
    number TEXT PRIMARY KEY,
    token TEXT,
    txn_id INTEGER
)''')

number_re = re.compile(r'[\d|+]\d{6,12}')
amount_re = re.compile(r'\d+(.\d{1,2}){0,1}')

users = {}


@dp.message_handler(commands=['start', 'help'])
async def command_handler(message: types.Message):
    await message.answer(WELCOME, parse_mode='MarkdownV2', reply_markup=MAIN_KB)


@dp.message_handler()
async def message_handler(message: types.Message):
    tx, id = message.text, message.from_user.id

    cur.execute(f'SELECT * FROM Users WHERE id = {id}')
    user = cur.fetchone()

    if not user:
        cur.execute(f'''INSERT INTO Users VALUES ({id}, 0)''')
        user = (id, 0,)

    if id not in users:
        users[id] = ''

    if users[id] == 'withdraw_qiwi_number':
        if number_re.fullmatch(tx):
            if tx[0] == '+':
                number = tx
            else:
                number = '+' + tx
            users[id] = 'withdraw_qiwi_amount_' + number
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞')
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

    elif users[id].startswith('withdraw_qiwi_amount_'):
        if amount_re.fullmatch(tx):
            cur.execute(f'SELECT balance FROM Users WHERE id = {id}')
            if cur.fetchone()[0] >= float(tx) * 100:
                number = users[id].split('_')[-1]
                amount = int(float(tx) * 100)
                await bot.edit_message_text(f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤–æ–¥–∞: `{amount / 100:.2f}` ‚ÇΩ –Ω–∞ –Ω–æ–º–µ—Ä: *{number}*', id, message.message_id, reply_markup=CONFIRM_KB)
                users[id] = f'withdraw_qiwi_confirm_{number}_{amount}'
            else:
                await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

    elif tx == '–ü–µ—Ä–µ–≤–æ–¥ üí∏':
        await message.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... üõ†')

    elif tx == '–ü—Ä–æ—Ñ–∏–ª—å üë§':
        await message.answer(f'*üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\nID: `{id}`\n–ë–∞–ª–∞–Ω—Å: `{user[1] / 100:.2f}` ‚ÇΩ', parse_mode='MarkdownV2')

    elif tx == '–î–µ–ø–æ–∑–∏—Ç üí∞':
        await message.reply('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=DEPOSIT_METHODS_KB)

    elif tx == '–í–∞—É—á–µ—Ä—ã üéÅ':
        await message.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... üõ†')

    elif tx == '–í—ã–≤–æ–¥ üí≥':
        await message.reply('üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞', reply_markup=WITHDRAW_METHODS_KB)

    elif tx == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì':
        await message.answer('–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @hugopay_support\n–ö–∞–Ω–∞–ª: @hugopay_news')

    elif tx == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        await message.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... üõ†')

    elif id == 603660417:
        data = tx.split()

        if tx == '/users':
            cur.execute('SELECT COUNT(*) from Users')
            await message.answer(f'–Æ–∑–µ—Ä–æ–≤: {cur.fetchone()[0]}')

        elif tx.startswith('/add_wallet'):
            number, token = data[1:3]
            print(number, token)
            cur.execute(f'INSERT INTO Qiwi VALUES ("{number}", "{token}", 0)')
            Thread(target=qiwi_handler, args=(number, token,)).start()
            await message.answer('done')

    else:
        await message.answer('–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è :(\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é!', reply_markup=MAIN_KB)


@dp.callback_query_handler()
async def query_handler(query: types.CallbackQuery):
    dt, id, mid = query.data, query.from_user.id, query.message.message_id

    if dt == 'cancel':
        users[id] = ''
        await bot.delete_message(id, query.message.reply_to_message.message_id)
        await bot.delete_message(id, mid)

    elif dt == 'deposit_qiwi':
        cur.execute('SELECT number FROM Qiwi ORDER BY RANDOM() LIMIT 1')
        number = cur.fetchone()[0]
        kb = InlineKeyboardMarkup().row(InlineKeyboardButton('–°—Å—ã–ª–∫–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞', url=QIWI_PAYMENT.format(number, id))).row(CANCEL)
        await bot.edit_message_text(f'–°–æ–≤–µ—Ä—à–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\\.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤—Ä—É—á–Ω—É—é –ø–æ –¥–∞–Ω–Ω—ã–º –Ω–∏–∂–µ:\n–ù–æ–º–µ—Ä: `\\+{number}`\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{id}`', id, mid, reply_markup=kb, parse_mode='MarkdownV2')

    elif dt == 'withdraw_qiwi':
        await bot.edit_message_text('–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä Qiwi –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "+79991234567"', id, mid)
        users[id] = 'withdraw_qiwi_number'

    elif dt == 'confirm':
        if users[id].startswith('withdraw_qiwi_confirm_'):
            number, amount = users[id].split('_')[-2:]
            if qiwi_send(number, int(amount)):
                cur.execute(f'UPDATE Users SET balance = balance - {amount} WHERE id = {id}')
                await bot.edit_message_text(f'üí∏ –í—ã–≤–æ–¥ `{amount / 100:.2f}` ‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Qiwi *{number}*', id, mid)
            else:
                await bot.edit_message_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ', id, mid)


    await bot.answer_callback_query(query.id)


if __name__ == '__main__':
    cur.execute('SELECT number, token FROM Qiwi WHERE 1')
    for number, token in cur.fetchall():
        print(number, token)
        Thread(target=qiwi_handler, args=(number, token,)).start()

    executor.start_polling(dp, skip_updates=True)
