from aiogram import Bot, Dispatcher, executor, types
from config import *
from secret import *
from payments import qiwi_handler, qiwi_send, qiwi_balance
from threading import Thread, Lock
import sqlite3
import logging
import re
import json
import random


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

lock = Lock()

con = sqlite3.connect('db.sqlite', check_same_thread=False)
cur = con.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS Users (
    id INTEGER PRIMARY KEY,
    balance INTEGER
)''')
cur.execute('''CREATE TABLE IF NOT EXISTS Qiwi (
    number TEXT PRIMARY KEY,
    token TEXT,
    txn_id INTEGER
)''')
cur.execute('''CREATE TABLE IF NOT EXISTS Vouchers (
    id INTEGER PRIMARY KEY,
    amount INTEGER,
    activations INTEGER,
    users TEXT,
    creator INTEGER
)''')

number_re = re.compile(r'[\d|+]\d{6,12}')
amount_re = re.compile(r'\d+(.\d{1,2}){0,1}')

users = {}


@dp.message_handler(commands=['start', 'help'])
async def command_handler(message: types.Message):
    tx, id = message.text, message.from_user.id

    with lock:
        cur.execute(f'SELECT * FROM Users WHERE id = {id}')
        if not cur.fetchone():
            cur.execute(f'''INSERT INTO Users VALUES ({id}, 0)''')
            con.commit()

    if tx.startswith('/start '):
        a, v = tx[7], tx[9:]
        print([a, v])
        if a == 'v':
            # Voucher
            with lock:
                cur.execute(f'SELECT * FROM Vouchers WHERE id = {v}')
                voucher = cur.fetchone()
                if voucher:
                    u = json.loads(voucher[3])
                    if id not in u:
                        u.append(id)
                        if voucher[2] == 1:
                            cur.execute(f'DELETE FROM Vouchers WHERE id = {v}')
                        else:
                            cur.execute(f'UPDATE Vouchers SET activations = activations - 1, users = "{json.dumps(u)}" WHERE id = {v}')
                        cur.execute(f'UPDATE Users SET balance = balance + {voucher[1]} WHERE id = {id}')
                        con.commit()
                        await message.answer(f'üéÅ –í–∞—É—á–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\\!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏: `{voucher[1] / 100:.2f}` ‚ÇΩ', parse_mode='MarkdownV2', reply_markup=MAIN_KB)
                        await bot.send_message(voucher[4], f'üéÅ `{id}` –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à –≤–∞—É—á–µ—Ä –Ω–∞ `{voucher[1] / 100:.2f}` ‚ÇΩ', parse_mode='MarkdownV2')
                    else:
                        await message.answer('–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –≤–∞—É—á–µ—Ä!', reply_markup=MAIN_KB)
                else:
                    await message.answer('–í–∞—É—á–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.', reply_markup=MAIN_KB)
    else:
        await message.answer(WELCOME, parse_mode='MarkdownV2', reply_markup=MAIN_KB)


@dp.message_handler()
async def message_handler(message: types.Message):
    tx, id = message.text, message.from_user.id

    with lock:
        cur.execute(f'SELECT * FROM Users WHERE id = {id}')
        user = cur.fetchone()

    if not user:
        with lock:
            cur.execute(f'''INSERT INTO Users VALUES ({id}, 0)''')
            con.commit()
        user = (id, 0,)

    if id not in users:
        users[id] = ''

    if tx == '–ü–µ—Ä–µ–≤–æ–¥ üí∏':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
        users[id] = 'send_id'

    elif tx == '–ü—Ä–æ—Ñ–∏–ª—å üë§':
        await message.answer(f'*üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\nID: `{id}`\n–ë–∞–ª–∞–Ω—Å: `{user[1] / 100:.2f}` ‚ÇΩ', parse_mode='MarkdownV2')

    elif tx == '–î–µ–ø–æ–∑–∏—Ç üí∞':
        await message.reply('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=DEPOSIT_METHODS_KB)

    elif tx == '–í–∞—É—á–µ—Ä—ã üéÅ':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—É—á–µ—Ä–∞ \\(–º–∏–Ω\\. `1.00` ‚ÇΩ\\)', parse_mode='MarkdownV2')
        users[id] = 'voucher_amount'

    elif tx == '–í—ã–≤–æ–¥ üí≥':
        await message.reply('üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞', reply_markup=WITHDRAW_METHODS_KB)

    elif tx == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì':
        await message.answer('–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @hugopay_support\n–ö–∞–Ω–∞–ª: @hugopay_news')

    elif tx == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        await message.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... üõ†')

    elif users[id] == 'withdraw_qiwi_number':
        if number_re.fullmatch(tx):
            if tx[0] == '+':
                number = tx
            else:
                number = '+' + tx
            users[id] = 'withdraw_qiwi_amount_' + number
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞')
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    elif users[id].startswith('withdraw_qiwi_amount_'):
        if amount_re.fullmatch(tx):
            if '.' in tx:
                amount = int(tx.split('.')[0]) * 100
                if len(tx.split('.')[1]) == 1:
                    amount += int(tx.split('.')[1]) * 10
                else:
                    amount += int(tx.split('.')[1])
            else:
                amount = int(tx) * 100

            if amount >= 100:
                with lock:
                    cur.execute(f'SELECT balance FROM Users WHERE id = {id}')
                    res = cur.fetchone()[0]
                if res >= amount:
                    number = users[id].split('_')[-1]
                    await message.answer(f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤–æ–¥–∞ `{amount / 100:.2f}` ‚ÇΩ –Ω–∞ –Ω–æ–º–µ—Ä *{number}*'.replace('+', '\\+'), parse_mode='MarkdownV2', reply_markup=CONFIRM_KB)
                    users[id] = f'withdraw_qiwi_confirm_{number}_{amount}'
                else:
                    await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            else:
                await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ Qiwi ‚Äî `1.00` ‚ÇΩ', parse_mode='MarkdownV2')
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    elif users[id] == 'send_id':
        if set(tx) <= set('0123456789') and 5 < len(tx) < 15:
            with lock:
                cur.execute(f'SELECT * FROM Users WHERE id = {tx}')
                res = cur.fetchall()
            if res:
                await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ \\(–º–∞–∫—Å\\. `{user[1] / 100:.2f}` ‚ÇΩ\\)', parse_mode='MarkdownV2')
                users[id] = 'send_amount_' + tx
            else:
                await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

    elif users[id].startswith('send_amount_'):
        if amount_re.fullmatch(tx):
            if '.' in tx:
                amount = int(tx.split('.')[0]) * 100
                if len(tx.split('.')[1]) == 1:
                    amount += int(tx.split('.')[1]) * 10
                else:
                    amount += int(tx.split('.')[1])
            else:
                amount = int(tx) * 100

            if amount > 0:
                with lock:
                    cur.execute(f'SELECT balance FROM Users WHERE id = {id}')
                    res = cur.fetchone()[0]
                if res >= amount:
                    uid = users[id].split('_')[-1]
                    await message.answer(f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤–æ–¥–∞ `{amount / 100:.2f}` ‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *{uid}*', parse_mode='MarkdownV2', reply_markup=CONFIRM_KB)
                    users[id] = f'send_confirm_{uid}_{amount}'
                else:
                    await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            else:
                await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî `0.01` ‚ÇΩ', parse_mode='MarkdownV2')
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    elif users[id] == 'voucher_amount':
        if amount_re.fullmatch(tx):
            if '.' in tx:
                amount = int(tx.split('.')[0]) * 100
                if len(tx.split('.')[1]) == 1:
                    amount += int(tx.split('.')[1]) * 10
                else:
                    amount += int(tx.split('.')[1])
            else:
                amount = int(tx) * 100

            if amount >= 100:
                with lock:
                    cur.execute(f'SELECT balance FROM Users WHERE id = {id}')
                    res = cur.fetchone()[0]
                if res >= amount:
                    await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –≤–∞—É—á–µ—Ä–∞ \\(–º–∞–∫—Å\\. `{res // amount}`\\)', parse_mode='MarkdownV2')
                    users[id] = f'voucher_number_{amount}'
                else:
                    await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            else:
                await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∞—É—á–µ—Ä–∞ ‚Äî `1.00` ‚ÇΩ', parse_mode='MarkdownV2')
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    elif users[id].startswith('voucher_number'):
        if set(tx) <= set('0123456789') and int(tx) > 0:
            amount, number = int(users[id].split('_')[-1]), int(tx)
            with lock:
                cur.execute(f'SELECT balance FROM Users WHERE id = {id}')
                res = cur.fetchone()[0]
            if res >= amount * number:
                # nice, let's create voucher
                while True:
                    voucher = random.randint(1000000, 9999999)
                    cur.execute(f'SELECT * FROM Vouchers WHERE id = {voucher}')
                    if not cur.fetchall():
                        break
                cur.execute(f'INSERT INTO Vouchers VALUES ({voucher}, {amount}, {number}, "[]", {id})')
                cur.execute(f'UPDATE Users SET balance = balance - {amount * number} WHERE id = {id}')
                con.commit()
                users[id] = ''
                kb = InlineKeyboardMarkup().row(InlineKeyboardButton(text='üéà –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', switch_inline_query=f't.me/hugopay_bot?start=v_{voucher}'))
                await message.answer(f'–í–∞—É—á–µ—Ä —Å–æ–∑–¥–∞–Ω\\!\n`{number}` –ê–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ `{amount / 100:.2f}` ‚ÇΩ\n\nt\\.me/hugopay\\_bot?start\\=v\\_{voucher}', parse_mode='MarkdownV2', reply_markup=kb)
            else:
                await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    elif id == 603660417:
        data = tx.split()

        if tx == '/users':
            with lock:
                cur.execute('SELECT COUNT(*) from Users')
                await message.answer(f'–Æ–∑–µ—Ä–æ–≤: {cur.fetchone()[0]}')

        elif tx.startswith('/add_wallet'):
            number, token = data[1:3]
            with lock:
                cur.execute(f'INSERT INTO Qiwi VALUES ("{number}", "{token}", 0)')
                con.commit()
            Thread(target=qiwi_handler, args=(number, token, lock,)).start()
            await message.answer('done')

        elif tx.startswith('/del_wallet'):
            number = data[1]
            with lock:
                cur.execute(f'DELETE FROM Qiwi WHERE number = {number}')
                con.commit()
            await message.answer('done')

        elif tx.startswith('/wallets'):
            with lock:
                cur.execute(f'SELECT number, token FROM Qiwi WHERE 1')
                res = cur.fetchall()
            result = []
            for number, token in res:
                result.append((number, qiwi_balance(number, token)))
            print(result)
            await message.answer('\n'.join([f'{number}: {balance / 100:.2f}' for number, balance in result]))

    else:
        await message.answer('–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è :(\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é!', reply_markup=MAIN_KB)


@dp.callback_query_handler()
async def query_handler(query: types.CallbackQuery):
    dt, id, mid = query.data, query.from_user.id, query.message.message_id

    if dt == 'cancel':
        users[id] = ''
        try:
            await bot.delete_message(id, query.message.reply_to_message.message_id)
        except:
            pass
        await bot.delete_message(id, mid)

    elif dt == 'deposit_qiwi':
        with lock:
            cur.execute('SELECT number FROM Qiwi ORDER BY RANDOM() LIMIT 1')
            number = cur.fetchone()[0]
        kb = InlineKeyboardMarkup().row(InlineKeyboardButton('–°—Å—ã–ª–∫–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞', url=QIWI_PAYMENT.format(number, id)))
        await bot.edit_message_text(f'–°–æ–≤–µ—Ä—à–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\\.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤—Ä—É—á–Ω—É—é –ø–æ –¥–∞–Ω–Ω—ã–º –Ω–∏–∂–µ:\n–ù–æ–º–µ—Ä: `\\+{number}`\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{id}`', id, mid, reply_markup=kb, parse_mode='MarkdownV2')

    elif dt == 'withdraw_qiwi':
        await bot.edit_message_text('–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä Qiwi –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "+79991234567"', id, mid)
        users[id] = 'withdraw_qiwi_number'

    elif dt == 'confirm':
        if users[id].startswith('withdraw_qiwi_confirm_'):
            number, amount = users[id].split('_')[-2:]
            amount = int(amount)
            with lock:
                cur.execute(f'SELECT balance FROM Users WHERE id = {id}')
                res = cur.fetchone()[0]
                if res >= amount:
                    if qiwi_send(number, amount, lock):
                        cur.execute(f'UPDATE Users SET balance = balance - {amount} WHERE id = {id}')
                        con.commit()
                        await bot.edit_message_text(f'üí∏ –í—ã–≤–æ–¥ `{amount / 100:.2f}` ‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Qiwi *{number}*'.replace('+', '\\+'), id, mid, parse_mode='MarkdownV2')
                    else:
                        await bot.edit_message_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.', id, mid)
                else:
                    await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

        elif users[id].startswith('send_confirm_'):
            uid, amount = map(int, users[id].split('_')[-2:])
            with lock:
                cur.execute(f'SELECT balance FROM Users WHERE id = {id}')
                res = cur.fetchone()[0]
                if res >= amount:
                    cur.execute(f'UPDATE Users SET balance = balance - {amount} WHERE id = {id}')
                    cur.execute(f'UPDATE Users SET balance = balance + {amount} WHERE id = {uid}')
                    con.commit()
                    await bot.edit_message_text(f'üí∏ –ü–µ—Ä–µ–≤–æ–¥ `{amount / 100:.2f}` ‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *{uid}*', id, mid, parse_mode='MarkdownV2')
                    await bot.send_message(uid, f'üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ `{amount / 100:.2f}` ‚ÇΩ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *{id}*', parse_mode='MarkdownV2')
                else:
                    await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    await bot.answer_callback_query(query.id)


if __name__ == '__main__':
    cur.execute('SELECT number, token FROM Qiwi WHERE 1')
    for number, token in cur.fetchall():
        Thread(target=qiwi_handler, args=(number, token, lock,)).start()

    executor.start_polling(dp, skip_updates=True)
